
This is being written so in order to understand why I'm not comparing Blackboard to OO, Functional programming, and these others forms of module composition.

* A language with no modules?

Do we always work with modules when working with a computer. Is it possible to build a system entirely from scratch?

You could divide up areas of a system described using this notation according to functionality. This would fulfil basic definition of modules - even when system does not provide standard mechanism for interfacing between them. (Although Church does provide a standard wrapper - the function). 
One could argue that this doesn't tell us much because it is *applies everywhere to everything* - all notation can be divided up in to parts unless the representation is atomic.

If we ignore the above argument perhaps we could use the following reasoning to say modules are always present:

All computations can be expressed either as a Turing machine or a Church style list of functions.

Even these highly abstract models of computation provide basic ingredients of functionality to work with. These ingredients are modules that provide some functionality.

- Turing machine
  - Symbols
  - Tape reading/writing/moving apparatus
  - State position tracking and movement

- Church
  - Functions
  - Identity

- Fortran precursors
  - Stack
  - Functions
  - Numbers

- BASIC
  - Side effects
  - peek/poke
  - for/loop etc
  - variable reference and setting
  - procedures
  - and in my experience functions

- All modern are constructed using computers use modules
  - machine code uses CPU implimented:
    - math operations + - / % AND OR etc
    - goto
    - move data
    - implemented at CPU level as hardware
      - you could take another (lower level) perspective 
        - and look at transistors or NAND gates as modules?
  - including fortran/BASIC/machine code


** Conclusions?
 All languages have basic utterances and ways of joining them?
 What differs is that some offer nicer or standard abstractions  
 /the interface complexity used as an axis/

 When writing software no matter how close to the metal you are never working 'from scratch'.

 Multiple perspectives can be taken on any system. All of them require some 'modules' - predefined functionality.

