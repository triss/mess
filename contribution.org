
* As researchers have sought to make there software available to others 
  
Systems are beginning to be constructed utilising multiple researchers work

** SOA is good
*** cite:veale_service-oriented_2014 champions SOA as means of sharing functionality
** FloWr system and ConcretFlows 
*** we can export workflows as WebServices
*** ConcretFlows consumes webservices with ease
**** through a UI

How succesful SOA has been is questionable since programmers still seak other sources of functionality when working.

Often in CC researchers still build upon tools which they're familiar with.
MEXICA system - worked on by Perez etc 
``integrates more than a decade of research into computational creativity, and specifically story generation, by connecting subsystems that deal with plot, figuration, and the narrative discourse using a blackboard.''

ANGELINA game generation system built upon research of Coltons

Whilst this was neccesary at the time even 
Even Veale perhaps levereages his own work more often than that of others.

When external web services are utilised they tend to be from outside the CC community.

As researchers adopt the software made available by others in the field

developers have seak to integrate facilities provided by others the means by which this is achieved becomes a question.

Whilst language interoperability still remains a question it is largely a hurdle which can be lept with relative ease by most programmers since most languages provide 

* An example of this occurring with Poetry Generation Workshop
An example might be the cite:Corneli2015b where developers lifted modules from the cite:Misztal2014 's Blackboard based poetry generation system.

Despite Veale and others efforts to promote SOA as a means of sharing work
Mizstal's based poetry generation system provided a more readily available source of functionality.

** Why Mizstals work better source of functionality than WS?
*** *Central repository of related functionality*
*** Chosen domain of operation 
****  poetry specific modules
*** Developer of functionality being present
**** SOA modules documentation is not present
*** Fact that functionality is not 



 The researchers noticed they could be be usefully reapplied in other paradigms.



 In describing how a hypothetical multi-agent poetry system might be constructed the researchers 

 ``Keeping in mind the current limitations of FloWr – no looping or conditionals, only running one flowchart at a time and in one direction – a conversation between ProcessNodes or flowcharts is not immediately feasible.''

 ``“Experts” exchange information using the blackboard, but without direct communication and without feed- back about the reception of their created artifacts.''

 Figure 2 represents a hypothetical design in which a Workshop could take place with a minimally-altered version of FloWr. 

 As shown in Figure 2, each participant in the Workshop would be represented by a single node. 
 One of these nodes is a moderator in charge of dictating the interaction between the participants of the Workshop, while the rest represent flowcharts that have the ability to modify their own connections according to the discussions from theWorkshop – this can be achieved by exploiting the scripting mechanism of FloWr and dynamically loading the new structure of the flowchart. 
 Moreover, a shared log would contain the history of the messages exchanged during the Workshop and a queue of messages waiting to be delivered. We define four different types of messages that can be exchanged:




 The now retired FloWr and ConcreteFlows systems sought to expediate this process by providing a standard mechanism with which to do so.
 To date these systems have only allowed the organisation of these modules in to pipelines, where data is passed from one module to another.




*** Problem solving models
***** problem solving deals with the question of
****** "What pieces of knowledge should be applied when and how?"
******* 

 A problem-solving model is a scheme for organizing reasoning steps and domain knowledge to conszruct a solution to a problem. For example, in a backward-reasoning model, problem solving begins by reasoning backwards from a goal to be achieved towards an initial state (data). More specifically, in a rule-based backward-reasoning model knowledge is organized as "if-then" rules and modus ponens inference steps are applied to the rules from a goal rule back to an "initial-state rule" (a rule that looks at the input data). An excellent example of this approach to problem solving is the MYCIN program [45]. In a forward-reasoning model, however, the inference steps are applied from an initial state toward a goal. The OPS system exemplifies such a system [13]. In an opportunistic-reasoning model, pieces of knowledge are applied either backward or forward at the most "opportune" time. Put another way, the central issue of problem solving deals with the question of: "What pieces of knowledge should be applied when and how?" A problem-solving model provides a conceptual framework for organizing knowledge and a strategy for applying that knowledge.

 The blackboard model of problem solving is a highly structured, special case of opportunistic problem solving. In addition to opportunistic reasoning as a knowledge-application strategy, the blackboard model prescribes the organization of the domain knowledge and all the input and intermediate and partial solutions needed to solve the problem. *We refer to all possible partial and full solutions to a problem as its solution space.
 In'

*** Begin my blathering
 cite:Craig1988 compares the opportunistic style of reasoning exhibited by the blackboard to the forwards and backwards reasoning models utilised during the GOFAI period.


*** Why am I not comparing to Logic programming - backwards reasoning?
Unfortunately the backwards reasoning approach to combined reasoning systems is now out of reach to most researchers wishing to combine others work.

Most functionality is expressed in a language that does not exhibit the *reversibility* logic programming languages

A webservice typically only allows forward reasoning using it's capabilities. 
The same is true of functionality bundled up in FloWr, ConcreteFlows, BB Poetry system and Slant

Modules provided only operate in /if this then that/ we don't get /if that then this/ for free.
i.e. modules only useful for forward inference.

